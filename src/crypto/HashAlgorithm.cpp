#include <iostream>
#include <iomanip>
#include <sstream>
#include <openssl/sha.h>
#include <vector>
#include <string>
using namespace std;

class HashAlgorithm {
public:
    string GetSHA1_HashString(const vector<unsigned char>& buff) {
        unsigned char hash[SHA_DIGEST_LENGTH];
        SHA1(buff.data(), buff.size(), hash);

        // Convert hash to hex string
        ostringstream hexStream;
        for (int i = 0; i < SHA_DIGEST_LENGTH; i++) {
            hexStream << setw(2) << setfill('0') << hex << static_cast<int>(hash[i]);
        }
        return hexStream.str();
    }

    vector<unsigned char> GetSHA1_HashBytes(const vector<unsigned char>& buff) {
        vector<unsigned char> hash(SHA_DIGEST_LENGTH);
        SHA1(buff.data(), buff.size(), hash.data());
        return hash;
    }

    vector<unsigned char> GetSHA256_HashBytes(const vector<unsigned char>& buff) {
        vector<unsigned char> hash(SHA256_DIGEST_LENGTH);
        SHA256(buff.data(), buff.size(), hash.data());
        return hash;
    }
};

int main() {
    HashAlgorithm obj;

    string s1 = "1234";
    vector<unsigned char> s1Bytes(s1.begin(), s1.end());
    cout << "\nHashCode Generated by SHA-1 for: " << s1 << " : " << obj.GetSHA1_HashString(s1Bytes) << "\n";

    string s2 = "2345";
    vector<unsigned char> s2Bytes(s2.begin(), s2.end());
    cout << "\nHashCode Generated by SHA-1 for: " << s2 << " : " << obj.GetSHA1_HashString(s2Bytes) << "\n";

    return 0;
}